# -*- coding: utf-8 -*-
"""Entrega 1 analitica de datos_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gfvnzkB9Hh3TOmAGc1JwrlK5pWYX6-wY
"""

# importar datos
from google.colab import drive
drive.mount('/content/drive')

## Remove Warnings
import warnings
warnings.filterwarnings("ignore")

## Data
import pandas as pd
import numpy as np
from itertools import product

## Visualization
import matplotlib.pyplot as plt
import seaborn as sns
from plotly.subplots import make_subplots
import plotly.express as px
import plotly.graph_objects as go
import plotly.figure_factory as ff

## Modelling
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import LinearRegression
import statsmodels.api as sm
from sklearn.metrics import mean_squared_error,  mean_absolute_error, mean_absolute_percentage_error, r2_score, classification_report
import math

"""DESCRIPCION DE LAS VARIABLES

#IMPORTACION DE DATOS
"""

infogeneral = pd.read_csv('/content/drive/MyDrive/ANALITICA_2/ENTREGA 1 ANALITICA/general_data.csv', sep = ",")
infogeneral.head(3)

from google.colab import drive
drive.mount('/content/drive')

infogeneral["EmployeeID"].unique()

encuesta_satisfaccion = pd.read_csv("/content/drive/MyDrive/ANALITICA_2/ENTREGA 1 ANALITICA/employee_survey_data.csv", sep = ",")
encuesta_satisfaccion.head(5)

evaluacion_desempeño= pd.read_csv("/content/drive/MyDrive/ANALITICA_2/ENTREGA 1 ANALITICA/manager_survey_data.csv", sep = ",")
evaluacion_desempeño.head(10)

tiempo_dedicacion= pd.read_excel("/content/drive/MyDrive/ANALITICA_2/ENTREGA 1 ANALITICA/time_work.xlsx", header = 0)
tiempo_dedicacion.set_index("EmployeeID", inplace = True)
tiempo_dedicacion.head(5)

"""#UNION DE TABLAS"""

tabla=pd.merge(infogeneral, encuesta_satisfaccion, how="inner", on="EmployeeID").merge(evaluacion_desempeño,  how="inner", on="EmployeeID" ).merge(tiempo_dedicacion, how="inner", on="EmployeeID")
tabla.head(5)

"""#RENOMBRAMIENTO DE COLUMNAS"""

tabla.rename(columns={"Age":"edad","Attrition":"desercion_año_anterior","BusinessTravel":"frecuencia_viajes","Department":"departamento","DistanceFromHome":"distancia_domicilio","Education":"educacion","EducationField":"formacion","EmployeeCount":"conteo_de_empleados","EmployeeID":"ID","Gender":"genero","JobLevel":"nivel_de_cargo","JobRole":"nombre_cargo","MaritalStatus":"estado_civil","MonthlyIncome":"ingresos_mensuales","NumCompaniesWorked":"empresas_anteriores","Over18":"edad>18","PercentSalaryHike":"porcentaje_aumentosalario","StandardHours":"horas_trabajo","StockOptionLevel":"nivel_de_opciones","TotalWorkingYears":"años_de_trabajo","TrainingTimesLastYear":"numero_capacitaciones","YearsAtCompany":"años_empresa","YearsSinceLastPromotion":"años_desde_acenso","YearsWithCurrManager":"años_jefe_actual","EnvironmentSatisfaction":"satisfaccion_entorno","JobSatisfaction":"satisfaccion_laboral","WorkLifeBalance":"conciliacion_faimilar_laboral","JobInvolvement":"implicacion_laboral","PerformanceRating":"rendimiento","mean_time":"tiempo_prom_dia"},inplace=True)

tabla

"""#ANALISIS EXPLORATORIO

#TRATAMIENTO DE NULOS
"""

tabla.info()

tabla.isnull().sum()

fig, axes = plt.subplots(2,2)   #poner nombre de graficos y variables
axes[0,0].plot(tabla["empresas_anteriores"].value_counts(),"o")
axes[0,1].plot(tabla["satisfaccion_entorno"].value_counts(),"o")
axes[1,0].plot(tabla["satisfaccion_laboral"].value_counts(),"o")
axes[1,1].plot(tabla["conciliacion_faimilar_laboral"].value_counts(),"o")

fig, axes = plt.subplots(2,2)   #poner nombre de graficos y variables
axes[0,0].hist(tabla["empresas_anteriores"].value_counts())
axes[0,1].hist(tabla["satisfaccion_entorno"].value_counts())
axes[1,0].hist(tabla["satisfaccion_laboral"].value_counts())
axes[1,1].hist(tabla["conciliacion_faimilar_laboral"].value_counts())

# crear dataset
base = tabla.groupby(['empresas_anteriores'])[['edad']].count().reset_index().sort_values('edad', ascending = False).rename(columns ={'edad':'count'})

# crear gráfica
fig = px.bar(base, x='empresas_anteriores', y='count', barmode ='group', title ='<b>Empresas anteriores<b>')

# agregar detalles a la gráfica
fig.update_layout(
    yaxis_title = 'Cantidad',
    xaxis_title = 'Empresas anteriores',
    template = 'simple_white',
    title_x = 0.5)

fig.show()

# crear dataset
base = tabla.groupby(['satisfaccion_entorno'])[['edad']].count().reset_index().sort_values('edad', ascending = False).rename(columns ={'edad':'count'})

# crear gráfica
fig = px.bar(base, x='satisfaccion_entorno', y='count', barmode ='group', title ='<b>Satisfaccion entorno<b>')

# agregar detalles a la gráfica
fig.update_layout(
    yaxis_title = 'Cantidad',
    xaxis_title = 'Satisfaccion entorno',
    template = 'simple_white',
    title_x = 0.5)

fig.show()

# crear dataset
base = tabla.groupby(['satisfaccion_laboral'])[['edad']].count().reset_index().sort_values('edad', ascending = False).rename(columns ={'edad':'count'})

# crear gráfica
fig = px.bar(base, x='satisfaccion_laboral', y='count', barmode ='group', title ='<b>Satisfaccion laboral<b>')

# agregar detalles a la gráfica
fig.update_layout(
    yaxis_title = 'Cantidad',
    xaxis_title = 'Satisfaccion laboral',
    template = 'simple_white',
    title_x = 0.5)

fig.show()

# crear dataset
base = tabla.groupby(['conciliacion_faimilar_laboral'])[['edad']].count().reset_index().sort_values('edad', ascending = False).rename(columns ={'edad':'count'})

# crear gráfica
fig = px.bar(base, x='conciliacion_faimilar_laboral', y='count', barmode ='group', title ='<b>Conciliación familial-laboral<b>')

# agregar detalles a la gráfica
fig.update_layout(
    yaxis_title = 'Cantidad',
    xaxis_title = 'Conciliación familial-laboral',
    template = 'simple_white',
    title_x = 0.5)

fig.show()

# crear dataset
base = tabla.groupby(['años_de_trabajo'])[['edad']].count().reset_index().sort_values('edad', ascending = False).rename(columns ={'edad':'count'})

# crear gráfica
fig = px.bar(base, x='años_de_trabajo', y='count', barmode ='group', title ='<b>Años de trabajo<b>')

# agregar detalles a la gráfica
fig.update_layout(
    yaxis_title = 'Cantidad',
    xaxis_title = 'Años de trabajo',
    template = 'simple_white',
    title_x = 0.5)

fig.show()

tabla["empresas_anteriores"]=tabla["empresas_anteriores"].apply(lambda x: x if not pd.isnull(x) else int(tabla["empresas_anteriores"].mean()))
tabla["satisfaccion_entorno"]=tabla["satisfaccion_entorno"].apply(lambda x: x if not pd.isnull(x) else int(tabla["satisfaccion_entorno"].mean()))
tabla["satisfaccion_laboral"]=tabla["satisfaccion_laboral"].apply(lambda x: x if not pd.isnull(x) else int(tabla["satisfaccion_laboral"].mean()))
tabla["conciliacion_faimilar_laboral"]=tabla["conciliacion_faimilar_laboral"].apply(lambda x: x if not pd.isnull(x) else int(tabla["conciliacion_faimilar_laboral"].mean()))
tabla["años_de_trabajo"]=tabla["años_de_trabajo"].apply(lambda x: x if not pd.isnull(x) else int(tabla["años_de_trabajo"].mean()))

tabla.isnull().sum()

"""##DUPLICADOS"""

tabla[tabla.duplicated()]

"""#ANALISIS UNIVARIADO

## VARIABLES NUMERICAS

### EDAD

###DISTANCIA DE DOMICILIO
"""

tabla.info()

tabla["distancia_domicilio"].unique()

fig= make_subplots(rows=1,cols=2)
fig.add_trace(go.Histogram(x=tabla["distancia_domicilio"], name="histograma distancia de domicilio",marker_color='coral'), row=1,col=1)
fig.add_trace(go.Box(y=tabla["distancia_domicilio"],name="Box plox distancia del domicilio",marker_color='coral'),row=1, col=2)
fig.show()

fig= make_subplots(rows=1,cols=2)
fig.add_trace(go.Histogram(x=tabla["distancia_domicilio"], name="histograma distancia de domicilio",marker_color='coral'), row=1,col=1)
fig.add_trace(go.Box(y=tabla["distancia_domicilio"],name="Box plox distancia del domicilio",marker_color='coral'),row=1, col=2)
fig.show()

base = tabla.groupby([''])[['work_year']].count().reset_index().sort_values('work_year', ascending = False).rename(columns ={'work_year':'count'})

# crear gráfica
fig = px.pie(base, names='experience_level', values='count', title ='<b>Experiencia trabajando<b>')

# agregar detalles a la gráfica
fig.update_layout(
    xaxis_title = 'Experiencia trabajando',
    yaxis_title = 'Cantidad',
    template = 'simple_white',
    title_x = 0.5)

fig.show()

"""###EDUCACION----ES ORDINAL"""

tabla["educacion"].unique()

# crear dataset
base = tabla.groupby(['educacion'])[['edad']].count().reset_index().sort_values('edad', ascending = False).rename(columns ={'edad':'count'})

# crear gráfica
fig = px.pie(base, names='educacion', values='count', title ='<b>Nivel de educacion<b>')

# agregar detalles a la gráfica
fig.update_layout(
    xaxis_title = 'Nivel de educacion',
    yaxis_title = 'Cantidad',
    template = 'simple_white',
    title_x = 0.5)

fig.show()

"""### EDUCACION

##VARIABLES CATEGORICAS
"""

print('hola')

asafag